name: Build and Release
on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master

env:
    REPOSITORY: "quay-its.epfl.ch"
    APP_NAME: "ticketshop"
    ORGANIZATION: "svc0049"

jobs:
    detect-version:
        name: Detect Version
        runs-on: ubuntu-24.04
        permissions:
            contents: read
        outputs:
            version: ${{ steps.get_version.outputs.version }}
            should_build: ${{ steps.check_version.outputs.should_build }}
            is_pr: ${{ steps.check_context.outputs.is_pr }}
            short_hash: ${{ steps.get_commit_hash.outputs.short_hash }}
        steps:
            - uses: actions/checkout@v4

            - id: check_context
              run: |
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    echo "is_pr=true" >> $GITHUB_OUTPUT
                  else
                    echo "is_pr=false" >> $GITHUB_OUTPUT
                  fi

            - id: get_commit_hash
              run: |
                  SHORT_HASH=$(git rev-parse --short HEAD)
                  echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT

            - id: get_version
              if: github.event_name == 'push'
              run: |
                  [ ! -f "package.json" ] && exit 1
                  version=$(jq -r .version package.json)
                  [ "$version" = "null" ] || [ -z "$version" ] && exit 1
                  echo "version=$version" >> $GITHUB_OUTPUT

            - id: check_version
              if: github.event_name == 'push'
              run: |
                  TAG_NAME="v${{ steps.get_version.outputs.version }}"
                  set +e
                  gh release view "$TAG_NAME" >/dev/null 2>&1
                  [ $? -eq 0 ] && echo "should_build=false" >> $GITHUB_OUTPUT || echo "should_build=true" >> $GITHUB_OUTPUT
                  set -e
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build-and-push:
        name: Build and Push
        needs: [detect-version]
        if: |
            (github.event_name == 'pull_request') ||
            (github.event_name == 'push' && needs.detect-version.outputs.should_build == 'true')
        runs-on: ubuntu-24.04
        permissions:
            contents: read
            packages: write
            pull-requests: read
        outputs:
            version: ${{ needs.detect-version.outputs.version }}
            build_success: ${{ steps.build_result.outputs.success }}
            image_tag: ${{ steps.set_tag.outputs.tag }}
        steps:
            - uses: actions/checkout@v4

            - id: set_tag
              run: |
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    TAG="${{ needs.detect-version.outputs.short_hash }}-dev"
                  else
                    TAG="${{ needs.detect-version.outputs.version }}"
                  fi
                  echo "tag=$TAG" >> $GITHUB_OUTPUT
                  echo "Building with tag: $TAG"

            - uses: docker/setup-buildx-action@v3

            - uses: docker/login-action@v3
              with:
                  registry: ${{ env.REPOSITORY }}
                  username: ${{ secrets.QUAY_ROBOT_USERNAME }}
                  password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

            - id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REPOSITORY }}/${{ env.ORGANIZATION }}/${{ env.APP_NAME }}
                  tags: |
                      type=raw,value=${{ steps.set_tag.outputs.tag }}
                      type=raw,value=latest,enable=${{ github.event_name == 'push' }}

            - uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/amd64
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - id: build_result
              run: echo "success=true" >> $GITHUB_OUTPUT

            - name: Build Summary
              run: |
                  echo "‚úÖ Image pushed to Quay.io"
                  echo "Tag: ${{ steps.set_tag.outputs.tag }}"
                  echo "Full image: ${{ env.REPOSITORY }}/${{ env.ORGANIZATION }}/${{ env.APP_NAME }}:${{ steps.set_tag.outputs.tag }}"

    create-release:
        name: Create Release
        needs: [detect-version, build-and-push]
        if: |
            github.event_name == 'push' &&
            needs.detect-version.outputs.should_build == 'true' &&
            needs.build-and-push.outputs.build_success == 'true'
        runs-on: ubuntu-24.04
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - id: generate_notes
              run: |
                  VERSION="${{ needs.detect-version.outputs.version }}"
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                  touch release_notes.txt

                  if [ -z "$LAST_TAG" ]; then
                    COMMITS_COUNT=$(git rev-list HEAD --count)
                    AUTHORS=$(git log --pretty=format:"%an" | sort -u | sed 's/.*$/`&`/' | paste -sd ',' | sed 's/,/, /g')
                    COMMITS=$(git log --oneline -10 --pretty=format:"%h %s")
                    echo "Initial release v$VERSION with $COMMITS_COUNT commits by $AUTHORS." >> release_notes.txt
                  else
                    COMMITS_COUNT=$(git rev-list ${LAST_TAG}..HEAD --count)
                    AUTHORS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%an" | sort -u | sed 's/.*$/`&`/' | paste -sd ',' | sed 's/,/, /g')
                    COMMITS=$(git log --oneline ${LAST_TAG}..HEAD --pretty=format:"%h %s")
                    echo "Release v$VERSION includes $COMMITS_COUNT commits since $LAST_TAG by $AUTHORS." >> release_notes.txt
                  fi

                  FEATURE_COMMITS=$(echo "$COMMITS" | grep -iE "\[(add|feat|feature)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$FEATURE_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### ‚ú® Features" >> release_notes.txt
                    echo "$FEATURE_COMMITS" >> release_notes.txt
                  fi

                  FIX_COMMITS=$(echo "$COMMITS" | grep -iE "\[(fix|bugfix|hotfix)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$FIX_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üêõ Bug Fixes" >> release_notes.txt
                    echo "$FIX_COMMITS" >> release_notes.txt
                  fi

                  MAINTENANCE_COMMITS=$(echo "$COMMITS" | grep -iE "\[(version|refactor|chore|style|perf|update|improve)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$MAINTENANCE_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üîß Maintenance" >> release_notes.txt
                    echo "$MAINTENANCE_COMMITS" >> release_notes.txt
                  fi

                  DOC_COMMITS=$(echo "$COMMITS" | grep -iE "\[(docs|doc|documentation)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$DOC_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üìö Documentation" >> release_notes.txt
                    echo "$DOC_COMMITS" >> release_notes.txt
                  fi

                  OTHER_COMMITS=$(echo "$COMMITS" | grep -viE "\[(add|feat|feature|fix|bugfix|hotfix|version|refactor|chore|style|perf|update|improve|docs|doc|documentation)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$OTHER_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üîÑ Other Changes" >> release_notes.txt
                    echo "$OTHER_COMMITS" >> release_notes.txt
                  fi

            - run: |
                  VERSION="${{ needs.detect-version.outputs.version }}"
                  gh release create "v$VERSION" --title "v$VERSION" --notes-file release_notes.txt --latest
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    cleanup:
        name: Pipeline Summary
        needs: [detect-version, build-and-push, create-release]
        if: always()
        runs-on: ubuntu-24.04
        steps:
            - run: |
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    [ "${{ needs.build-and-push.result }}" = "success" ] && \
                    echo "‚úÖ PR build completed successfully" || echo "‚ö†Ô∏è PR build failed"
                  else
                    [ "${{ needs.build-and-push.result }}" = "success" ] && \
                    [ "${{ needs.create-release.result }}" = "success" ] && \
                    echo "‚úÖ Release pipeline completed" || echo "‚ö†Ô∏è Pipeline completed with issues"
                  fi
