#!/usr/bin/perl
#
##############################################################################
#
# File Name:    cffWS
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#

use strict;
use DBI;

use vars qw($dbh $requesterIP);

$requesterIP = ',194.150.244.64,194.150.244.65,194.150.244.66,194.150.244.67,194.150.244.68,194.150.244.69,194.150.244.70,194.150.244.71,194.150.244.72,194.150.244.73,194.150.244.74,194.150.244.75,194.150.244.76,194.150.244.77,194.150.244.78,194.150.244.79,194.150.244.80,194.150.244.81,194.150.244.82,194.150.244.83,194.150.244.84,194.150.244.85,194.150.244.86,194.150.244.87,194.150.244.88,194.150.244.89,194.150.244.90,194.150.244.91,194.150.244.92,194.150.244.93,194.150.244.94';
$requesterIP .= ',128.178.1.146,128.178.109.23';

my $rechnungsstelle = 'EPFL'; # - facture
my $firmaID 		= 'epfl.ch';
my $password 		= 'epfl05';

my $vertragsnummer 	= 'EPFL776';
my $no_purge 		= '1';

my $DEBUG 	= -f '/opt/dinfo/etc/MASTER' ? 0 : 1;
if ($DEBUG) {
	$rechnungsstelle = 'RST_EPFL_1'; # - facture test
} else {
}

my %args = loadargs ();
my $id 	 = $args{artifact};

warn "SSO ** confirmArtifact: id=$id, IP=$ENV{REMOTE_ADDR}\n";

error ('artifact missing') unless $id;
error ("SSO - ILLEGAL REQUESTER : $ENV{REMOTE_ADDR}") unless ($requesterIP =~ /,$ENV{REMOTE_ADDR}/) ;

my  $dbh   	= dbconnect ('cff');

my $sql = qq{select * from transactions where id='$id'};
my $sth = dbquery($sql);
if (my $rec = $sth->fetchrow_hashref ()) {

	$rec->{nom}  =	latin1toutf8($rec->{nom});
	$rec->{pnom} =	latin1toutf8($rec->{pnom});
	
	my $msg = qq{<?xml version="1.0"?>
	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<soapenv:Body>
	<confirmArtifactResponse xmlns="http://SSO.mct.sbb.ch">
		<confirmArtifactReturn>
			<name>$rec->{nom}</name>		
			<vorname>$rec->{pnom}</vorname>
			<username>$rec->{sciper}</username>	
			<personalnummer>$rec->{sciper}</personalnummer>	
			<email>$rec->{email}</email>
			<rechnungsstelle>$rechnungsstelle</rechnungsstelle>
			<vertragsnummer>$vertragsnummer</vertragsnummer>
			<firmaID>$firmaID</firmaID>
			<sprache>fr</sprache>	
			<anrede>$rec->{sexe}</anrede>
			<kostenzuordnung>$rec->{no_fond}</kostenzuordnung>
			<telefonNr>$rec->{phone}</telefonNr>
			<password>$password</password>	
			<firmabez>EPFL</firmabez>	
			<adresszusatz/>				
			<strasse>av Piccard</strasse>
			<plz>1015</plz>
			<ort>Lausanne</ort>	
			<referenz/>				
			<referenz2>$rec->{no}</referenz2>
		</confirmArtifactReturn>
	</confirmArtifactResponse>
	</soapenv:Body>
	</soapenv:Envelope>};
	my $msglen = length($msg);	

	#	- PURGE TRANSACTION
	my $sql = qq{delete from transactions where sciper=$rec->{sciper}};
	my $sth = dbquery ( $sql );
	
	my $logTXT = $msg;
	$logTXT =~ s/\t//g;
warn "--> SSO : $logTXT\n";

	print qq{Content-Type: application/soap+xml; charset=utf-8
Content-Length: $msglen

$msg
};
} else {
warn "SSO : No such artifact : $id";
	error ("No such artifact : $id");
}

exit;

#--------
sub dbconnect {
	my ($dbkey) = @_;
	
	my $dbconf_file = '/opt/dinfo/etc/dbs.conf';
	die "dbconnect : ERR OPEN $dbconf_file [$!]" unless (open (DBCONF, "$dbconf_file")) ;
	my ($dbname, $dbhost, $dbuser, $dbpwd) ;
	while (<DBCONF>) {
		chomp;
		next if $_ =~ /^#/;	# - comments
		$_ =~ s/\t+/\t/g;
		next unless $_;
		my @items = split /\t/, $_;

		next unless $items[0] eq $dbkey;
		$dbname = $items[1];
		$dbhost = $items[2];
		$dbuser = $items[3];
		$dbpwd = $items[4];

		last;
	}
	close DBCONF;

	die "dbconnect : ERR DB CONFIG : $dbname, $dbhost, $dbuser" unless ($dbname and $dbhost and $dbuser and $dbpwd) ;
	my $dsndb    = qq{dbi:mysql:$dbname:$dbhost:3306}; 
	my $dbh = DBI->connect ($dsndb, $dbuser, $dbpwd);
	$dbh->{'mysql_enable_utf8'} = 1;

	die "dbconnect : ERR DBI CONNECT : $dbhost, $dbname, $dbuser" unless $dbh;
#warn "--> SSO dbconnect : $dsndb\n";

	return $dbh;
}
  
#--------
sub dbquery {
  my ($sql) = @_;

  my $sth = $dbh->prepare( $sql) or die "database fatal erreur prepare\n$DBI::errstr\n$sql\n";
  $sth->execute ()		 		 or die "database fatal erreur : execute : $DBI::errstr\n$sql\n";
  return $sth;
  
}

#____________________
sub latin1toutf8 {
	my $string = shift;
	$string =~ s/([\x80-\xFF])/chr(0xC0|ord($1)>>6).chr(0x80|ord($1)&0x3F)/eg;
	return $string;
}
  
#--------
sub loadargs {

  my $query = $ENV{QUERY_STRING};
  my $postdata;
  
  if ($ENV{'REQUEST_METHOD'} && $ENV{'REQUEST_METHOD'} eq 'POST') {
   read (STDIN, $postdata, $ENV{'CONTENT_LENGTH'});
  }
  my $allargs = $query . '&' . $postdata;
  my @fields  = split (/&/, $allargs);
  foreach (@fields) {
    s/\+/ /g;  
    s/%([0-9a-f]{2,2})/pack ("C", hex ($1))/gie;
  }
  my %args;

  foreach my $field (@fields) {
    next unless ($field =~ /=/);  
    my ($name, $value) = split(/=/, $field, 2);  
    $args{$name} .= ' ' if $args{$name};  
    $args{$name} .= "$value";
warn "--> loadargs :: $name=$value";
  # - test validité paramètres
	if ( $name eq 'artifact' ) {
		 error('illegal param value : '.$name) unless $value =~ /^\w+$/i;
	} else {
		 error('illegal parameter : '.$name);
	}
  }
  %args;
}

sub error {
	my ($msg) = @_;
	return unless $msg;

warn "SSO :: error :: $msg\n";

	print qq{Content-Type: text/html; charset=utf-8

Error : $msg};
	exit;
}
