#!/usr/bin/perl
#
##############################################################################
#
# File Name:    ress.pl
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#

use lib qw(/opt/dinfo/lib/perl);

use strict;
use HTML::Template;

use Cadi::CadiDB;
use Tequila::Client;
use Cadi::Accreds;

use vars qw(%args $tequila $gaspar $menupath $authstr $lang $key $sciper $email $nom $prenom
	    $respunits $droitunits $tmpldir $lang $errmsg $dbh $where $header_done $login_as $Rights $db_dinfo
	    $custURL $cffLogon $Accreds $filtreFonds
	    );

my $me 		= $ENV {SCRIPT_NAME};
my $us 		= $ENV {SERVER_NAME};
my $qs 		= $ENV {QUERY_STRING};
my $pi 		= $ENV {PATH_INFO};
my $lang 	= 'fr';
my @languages 	= ('fr','en');

my $no_purge= '';
my $tmpldir = '/var/www/vhosts/ticketshop.epfl.ch/private/tmpl/XX/';
my $su_list	= '104782,105640';	# - ic, cl

$filtreFonds= ',FT03-A,';

$login_as = '157507';

  %args	= loadargs ();
  $lang = $args{lang} if $args{lang};

  $tmpldir =~ s/XX/$lang/;
    
my $DEBUG 	= -f '/opt/dinfo/etc/MASTER' ? 0 : 1;

if ($DEBUG) {
	$cffLogon   = 'https://int-www.sbb.ch/ticketshop/b2b/SSOLogon.do';
#	$custURL	= 'custURL=https://test-ticketshop.epfl.ch/cgi-bin/SSO';	#	- appel SSP
	$custURL	= 'Customer=epfl_new';		#	- appel HTTP
} else {
	$cffLogon	= 'https://www.sbb.ch/mct/wi/shop/b2b/SSOLogon.do';
	$custURL	= 'Customer=epfl';
	$custURL	= 'Customer=epfl_new';
}

  $dbh   = dbconnect ('cff');
#  $Rights   = new Accred::Rights ();
  $Accreds  = new Cadi::Accreds (caller => '104782', utf8 => 1);
  $db_dinfo = new Cadi::CadiDB (
	  dbname => 'dinfo',
	   trace => 1,
		utf8 => 1,
  ) unless $db_dinfo;
  erreur ("FATAL DB ACCESS") unless $db_dinfo;

  authenticate () unless $pi eq '' or ($pi =~ /^\/(|quit|main)$/);

  purge_transactions ('5');
  dispatch ();

  exit;
	
#--------
sub dispatch {

   if      ($pi =~  /^\/go/) {
   	go ();
   } elsif ($pi =~  /^\/priv/) {
   	priv ();
   } elsif ($pi =~  /^\/quit/) {
   	quit ();
   }
   main ();

}
#------
sub main {

  my $template = initTempl('default.tmpl');
  $template->param(sErrMsg => $errmsg);

  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
  exit;
}
#------
sub priv {

  my $template = initTempl('priv.tmpl');

  my $fonds = getFonds ($droitunits);
  my $seltxt2;
  my $layerid = 1;
  my $seltxt1 = qq{<select name="cf" OnChange="ShowLayer(document.form1.cf.selectedIndex+1)">
  		};
  foreach my $cf (sort keys %$fonds) {
    my $flistref   = $fonds->{$cf};
    next unless @$flistref;

    $seltxt1 .= qq{<option value="$cf">$cf</option>
    		};
    my $layerclass = $layerid eq 1 ? 'layer1' : 'layer2';
    $seltxt2 	  .= qq{<div id="Layer$layerid" class="$layerclass">
    		<select name="fonds_$cf">
		};
    foreach my $fond (@$flistref) {
      my ($no, $lib) = split(/:/, $fond);
      #	- filtre exceptions
      
      $seltxt2 .= qq{<option value="$no">$no : $lib</option>
      };
    }
    $seltxt2 .= qq{</select>
    		</div>
    		};
    $layerid++;
  }

  $seltxt1 .= qq{</select>};
  $template->param(sAuthstr	=> 1 );
  $template->param(sCF		=> $seltxt1 );
  $template->param(sFonds	=> $seltxt2 );
  $template->param(sFormaction	=> "$me/go?lang=$lang"		);

  $errmsg = qq{adresse mail absente - l'accès à la prestation sera refusé} unless $email;
  $template->param(sErrMsg => $errmsg);
  print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
  exit;
}
#--------
sub go {

  my $id   = genkey ();
  my $loop = 1;
  while ($loop) {
    my $sth = dbquery(qq{select id from transactions where id='$id'});
    if ($sth->fetchrow) {
       $id = genkey ();
    } else {
       $loop = 0;
    }
  }

  my $CF    = $args{cf};
  my $Fonds = $args{"fonds_$CF"};
  
  unless ($Fonds) {
    my $template = initTempl('priv.tmpl');
    $errmsg = qq{fonds absent - l'accès à la prestation sera refusé};
    $template->param(sErrMsg => $errmsg);
	print "Content-Type: text/html; charset=iso-8859-1\n\n", $template->output;
	exit;
  }
  
  my $no    = removeaccents($args{sNoVoyage});
  my $phones;

  my $sth = $db_dinfo->query (qq{select sexe from sciper where sciper='$sciper'});
  my ($sexe) = $sth->fetchrow ();
  $sexe = $sexe eq 'F' ? '1' : '2';

  my $sql = qq{select distinct dinfo.annu.telephone1,dinfo.annu.telephone2	from dinfo.sciper left outer join dinfo.annu on dinfo.sciper.sciper=dinfo.annu.sciper where dinfo.annu.sciper='$sciper'};
  $sth = $db_dinfo->query ($sql);
		
  while (my ($tel1,$tel2) = $sth->fetchrow) {
    $phones .= ",$tel1" if $tel1;
    $phones .= ",$tel2" if $tel2;
  }
  $phones =~ s/^,//;
#  $phones =~ s/,/ /g;
  my $phone;
  map {
  	$_ =~ s/^0//;
  	if ($_ and $phone !~ /$_ /) {
		if (length($_) == 5) {
				$phone .= qq{+412169$_ };
		} else {
			$phone .= qq{+41$_ };
		}
	}  	
  } split /,/, $phones;
  $phones = substr($phone, 0, 12);
  $phones = '+41216931111' unless $phones;

  $nom 	  =~ s/\'/\'\'/g;
  $prenom =~ s/\'/\'\'/g;
  $no     =~ s/\'/\'\'/g;

  my $sql = qq{insert into transactions set
  	id='$id',
	sciper='$sciper',
	nom='$nom',
	pnom='$prenom',
	email='$email',
	phone='$phones',
	no_fond='$Fonds',
	sexe='$sexe',
	no='$no',
	datecrt=now()
  };
  dbquery($sql);
  my $redirect = qq{$cffLogon?$custURL&SAMLart=$id};
  warn "--> CFF go to : $redirect...";
  print qq{Location: $redirect\n\n};
  write_log ("$id:$nom:$prenom:$email:$phones:$Fonds");

  exit;
}

#--------
sub getFonds {
  my ($unitlist) = @_;
  
  $unitlist    =~ s/,/\',\'/g;
  my $fondsperCF;
  my $sql = qq{select cf from dinfo.unites where sigle in (\'$unitlist\')};
  my $sth = $db_dinfo->query ($sql);
  while (my ($cf) = $sth->fetchrow_array ()) {
    my @fonds;
  # - programmes doctoraux
    if ($cf =~ /^44/) {
	    $sql = qq{select no_fond,libelle,clients from dinfo.fonds where (no_fond like '$cf%' or cf = 'F$cf' ) and etat = 'O'};
	} else {
    	$sql = qq{select no_fond,libelle,clients from dinfo.fonds where cf = 'F$cf' and etat = 'O'};
	}

    my $sth = $db_dinfo->query ($sql);
    while (my ($no_fond,$libelle,$clients) = $sth->fetchrow_array ()) {
#warn "cf=$cf,no_fond=$no_fond,libelle=$libelle";
	  next unless $no_fond;
      next if $filtreFonds =~ /\b$clients\b/;
      push (@fonds, "$no_fond:$libelle");
    }
    $fondsperCF->{$cf} = \@fonds;
  }
  
  # - programmes doctoraux étudiants
  foreach my $item (split (/,/,$unitlist)) {
  	$item =~ s/\'//g;
  	next unless $item =~ /^ED??/;
    $sql = qq{select * from dinfo.fonds where libelle like '$item%' and etat = 'O'};
    my $sth = $db_dinfo->query ($sql);
    while (my $fonds_data = $sth->fetchrow_hashref) {
	    next if $filtreFonds =~ /\b$fonds_data->{clients}\b/;
	    my (@fonds, $cf);
    	$cf = $fonds_data->{cf};
    	$cf =~ s/^F//;
    	my $no_fond = $fonds_data->{no_fond};
    	my $libelle = $fonds_data->{libelle};
    	my $cf_fonds = $fondsperCF->{$cf};
#warn "*** prog doct : $cf : @$cf_fonds";
		next unless $no_fond;
		next if grep ("$no_fond:$libelle",@$cf_fonds);
    	push (@$cf_fonds, "$no_fond:$libelle");
    	$fondsperCF->{$cf} = $cf_fonds;
    }
 	
  }
  
  return $fondsperCF;
}
#--------
sub getUnitAddr {
  my ($cf) = @_;
  
  my $sql = qq{select distinct adresse_1,adresse_2,adresse_3,adresse_4 from dinfo.unites1 
  	where cf = '$cf' and (date_fin = '0000-00-00 00:00:00' or date_fin > now())
	};
  my $sth = $db_dinfo->query ($sql);
  my @adr;
  while (my ($adresse_1,$adresse_2,$adresse_3,$adresse_4) = $sth->fetchrow_array ()) {
    push (@adr, "$adresse_1:$adresse_2:$adresse_3:$adresse_4");
  }
  return @adr;

}
#--------
sub purge_transactions {
   my ($sesslife) = @_;
   
  return if $no_purge; 
#  dbquery(qq{delete from transactions where addtime(datecrt,'0:$sesslife:5') < now()});
   dbquery(qq{delete from transactions where addtime(datecrt,'0:$sesslife:5') < now() and sciper <> '104782'});
}
#--------
sub quit {
  if ($tequila) {
    $tequila->killsession ();
    $tequila->{authenticated} = undef;
  }
  main ();
}
#--------
sub write_log {
  my ($msg) = @_;
  
  $msg =~ s/\'/\'\'/g;
  dbquery(qq{insert into logs set
  	ts=now(),
	sciper='$sciper',
	msg='$msg'
  });
}
#--------
sub erreur {
  my ($txt) = @_;
  print qq{<p style="color: red;"><b>Erreur</b>: }. substr($txt, 0, 1024)."</p>";
  return;
}

#--------
sub authenticate {

  unless ($tequila) {
    $tequila = new Tequila::Client ();
    $tequila->init ();
  } 

  my $droit = 'droit-railticket';
  my $role  = 'role-respadmin';
  $tequila->setclientsesskey ($key) if $key;
  $tequila->setservice  ('Billets CFF en ligne');
  $tequila->setlang  	($lang);
  $tequila->request     ('name','firstname','uniqueid','email','where',$role);
  $tequila->require     ($droit);

  $tequila->authenticate ();

  $key 		= $tequila->{key};
  $sciper 	= $tequila->{attrs}->{uniqueid};
  $args{sciper} = $sciper;
  $nom 		= $tequila->{attrs}->{name};
  $prenom 	= $tequila->{attrs}->{firstname};
  if ($prenom =~ /,/) {
    my ($p1,$p2) = split(/,/, $prenom);
    $prenom = $p2;
  }
  if ($nom =~ /,/) {
    my ($p1,$p2) = split(/,/, $nom);
    $nom = $p2;
  }

  $email 	= $tequila->{attrs}->{'email'};
  if ($email =~ /,/) {
    my ($p1,$p2) = split(/,/, $email);
    $email = $p1;
  }

  $where 		= $tequila->{attrs}->{'where'};
  $droitunits	= $tequila->{attrs}->{$droit};
  
  if ($login_as and $sciper eq '104782') {
  	$sciper 	  = $login_as;
	my $ref_units = $Accreds->getAllUnitsWhereHasRight ($sciper, 35);	#	- 'railticket'
	my $units     = join "','", keys %$ref_units;
	$droitunits	  = getUnitsSigle($units);

warn " >> login_as cff $sciper : units=$units, droitunits=$droitunits\n";

}

getPersData ($sciper);

warn "cff $nom $prenom $email, droitunits=$droitunits";

}

#___________________
sub getUnitsSigle {
  my ($units) = @_;
  return unless $units;

  my $droitunits;
  my $sql = qq{select sigle,hierarchie from dinfo.unites where id_unite in ('$units')};
  my $sth = $db_dinfo->query ($sql);
  while (my ($sigle,$hierarchie) = $sth->fetchrow_array ()) {
  	next unless $sigle;
  	$droitunits .= "$sigle,";
  }
  $droitunits =~ s/,$//;
  return $droitunits;

}
#___________________
sub getPersData {
  my ($sciper) = @_;
  return unless $sciper;

  my $sql = qq{select nom_acc,prenom_acc,nom_usuel,prenom_usuel,addrlog from dinfo.sciper 
  	left outer join dinfo.emails on sciper.sciper=emails.sciper where sciper.sciper='$sciper'};
  my $sth = $db_dinfo->query ($sql);
  while (my $data = $sth->fetchrow_hashref) {
  	next unless $data;
  	$nom 	= $data->{nom_usuel} 	? $data->{nom_usuel} 	: $data->{nom_acc};
  	$prenom	= $data->{prenom_usuel} ? $data->{prenom_usuel} : $data->{prenom_acc};
  	$email 	= $data->{addrlog};
  }
}
#_____________
sub removeaccents {
  my ($str) = @_;
  $str =~ tr/\200-\237//d;
  $str =~ tr/\240-\377/"                               AAAAAA CEEEEIIIIDNOOOOO OUUUUY  aaaaaa ceeeeiiiionooooo ouuuuy y"/;
#                       "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  return $str;
}

#--------
sub dbconnect {
	my ($dbkey) = @_;
	
	my $dbconf_file = '/opt/dinfo/etc/dbs.conf';
	die "dbconnect : ERR OPEN $dbconf_file [$!]" unless (open (DBCONF, "$dbconf_file")) ;
	my ($dbname, $dbhost, $dbuser, $dbpwd) ;
	while (<DBCONF>) {
		chomp;
		next if $_ =~ /^#/;	# - comments
		$_ =~ s/\t+/\t/g;
		next unless $_;
		my @items = split /\t/, $_;

		next unless $items[0] eq $dbkey;
		$dbname = $items[1];
		$dbhost = $items[2];
		$dbuser = $items[3];
		$dbpwd = $items[4];

		last;
	}
	close DBCONF;

	die "dbconnect : ERR DB CONFIG : $dbname, $dbhost, $dbuser" unless ($dbname and $dbhost and $dbuser and $dbpwd) ;
	my $dsndb    = qq{dbi:mysql:$dbname:$dbhost:3306}; 
	my $dbh = DBI->connect ($dsndb, $dbuser, $dbpwd);
	$dbh->{'mysql_enable_utf8'} = 1;

	die "dbconnect : ERR DBI CONNECT : $dbhost, $dbname, $dbuser" unless $dbh;
	
	return $dbh;
}

#--------
sub dbquery {
  my ($sql) = @_;

  my $sth = $dbh->prepare( $sql) or die "database fatal erreur prepare\n$DBI::errstr\n$sql\n";
  $sth->execute ()		 		 or die "database fatal erreur : execute : $DBI::errstr\n$sql\n";
  return $sth;
  
}

#--------
sub loadargs {

  my $query = $ENV{QUERY_STRING};
  my $postdata;
  
  if ($ENV{'REQUEST_METHOD'} && $ENV{'REQUEST_METHOD'} eq 'POST') {
   read (STDIN, $postdata, $ENV{'CONTENT_LENGTH'});
  }
  my $allargs = $query . '&' . $postdata;
  my @fields  = split (/&/, $allargs);
  foreach (@fields) {
    s/\+/ /g;  
    s/%([0-9a-f]{2,2})/pack ("C", hex ($1))/gie;
  }
  my %args;
  foreach my $field (@fields) {
    next unless ($field =~ /=/);  
    my ($name, $value) = split(/=/, $field, 2);  
    $args {$name} .= ' ' if $args {$name};  
    $args {$name} .= "$value";
  }
  %args
}

#--------
sub genkey {
 srand (time ^ ($$ + ($$ << 15)));
 my $key = "";
 for (my $i = 0; $i < 32; $i++) {
   my $car .= int rand (35);
   $key .= ('a'..'z', '0'..'9')[$car];
 }
 return $key;
}
#------
sub initTempl {
   my ($tmplpath) = @_;

warn "cff initTempl: $tmpldir$tmplpath";
   my $template = HTML::Template->new(filename => $tmpldir.$tmplpath,
	   strict => 0,
	   cache => 1,
	   die_on_bad_params => 0) or die "err : $!";

   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   $year += 1900;
   $template->param(sCrtYear => $year);
   $template->param(sPathMe  => $me);
   $template->param(sID 	 => $sciper);
   $template->param(sPrenom  => $prenom);
   $template->param(sNom 	 => $nom);
   return $template;
}

