#!/usr/bin/perl
#
##############################################################################
#
# File Name:    cff
# Author:       Ion CIONCA (Ion.Cionca@epfl.ch) - 2005
#
#########################################################################
#####
#
#

die "/cgi-bin/last directory not used anymore";




use lib '/opt/dinfo/lib/perl';

use strict;
use HTML::Template;
use Net::LDAP;
use LWP::UserAgent; 
use JSON; 
use Data::Dumper;

use Cadi::CadiDB;
use Tequila::Client;
use Cadi::Accreds;

use vars qw(%args $tequila $gaspar $menupath $authstr $key $sciper $login_person $tmpldir $lang $errmsg $dbh $header_done
			$login_as $Rights $db_dinfo $custURL $cffLogon $Accreds $rightsItems $ldap $sap_user $sap_pwd $urlDossiers $fondsByCF
			$RIGHT_NAME $USE_DOSSIERS $fonds $CFFwebShop);

#	- get access params
require '/var/www/vhosts/ticketshop.epfl.ch/private/etc/access_params';	

	$ENV {SERVER_NAME} = $ENV {SITE_URL} if ($ENV {SERVER_NAME} eq '127.0.0.1' && $ENV {SITE_URL});
	my $me 		= $ENV {SCRIPT_NAME};
	my $us 		= $ENV {SERVER_NAME};
	my $pi 		= $ENV {PATH_INFO};
	my $NO_PURGE= '';
	my $tmpldir = '/var/www/vhosts/ticketshop.epfl.ch/private/tmpl/';
	my $su_list	= '169419,243371';	# - nborboen, quatrava
	my $SWISSPASS = 1;

	$RIGHT_NAME		= 'railticket';
	$USE_DOSSIERS = 1;

	my $help	= {
		help_epfl => {
			fr	=> qq{http://jahia-prod.epfl.ch/files/content/sites/travel/files/Documents/TicketshopAideEPFL.pdf},
			en	=> qq{http://jahia-prod.epfl.ch/files/content/sites/travel/files/Documents/TicketshopAideEPFL.pdf},
		},
		help_cff_ch => {
			fr	=> qq{https://www.sbb.ch/fr/clientele-commerciale/businesstravel/questions/remboursement/remboursement-online-ticket.html},
			en	=> qq{https://www.sbb.ch/en/business-customers/product-range/refunds/refund-swiss-online-tickets.html},
		},
		help_cff_mobile => {
			fr	=> qq{https://www.sbb.ch/fr/clientele-commerciale/offre/remboursement/remboursement-mobile-ticket.html},
			en	=> qq{https://www.sbb.ch/en/business-customers/product-range/refunds/refund-mobile-tickets.html},
		},
		help_cff_int => {
			fr	=> qq{https://www.sbb.ch/fr/clientele-commerciale/offre/remboursement/remoboursement-internationaux.html},
			en	=> qq{https://www.sbb.ch/en/business-customers/product-range/refunds/refund-international-tickets.html},
		},
	};

my $messages = {
	title1_label	=> {
		fr	=> qq{Déplacement avec dossier de voyage dans SESAME (Notes de frais)},
		en	=> qq{Travel with SESAME reference (Travel & Expenses)},
	},
	title2_label	=> {
		fr	=> qq{Autres cas},
		en	=> qq{Other},
	},
	benef_label	=> {
		fr	=> qq{Bï¿½nï¿½ficiaire du voyage},
		en	=> qq{Person to travel},
	},
	search_label	=> {
		fr	=> qq{Recherche par nom ou sciper},
		en	=> qq{Search by sciper or by name},
	},
	results_label	=> {
		fr	=> qq{Rï¿½sultats de la recherche},
		en	=> qq{Search results},
	},
	travelfor_label	=> {
		fr	=> qq{Voyage pour},
		en	=> qq{Search results},
	},
	selecttravel_label	=> {
		fr	=> qq{Sï¿½lectionner un voyage planifiï¿½},
		en	=> qq{Select a planned travel},
	},
	notravel_label1	=> {
		fr	=> qq{Sans numï¿½ro de dossier de voyage},
		en	=> qq{No planned travel already defined},
	},
	nodossier_label	=> {
		fr	=> qq{Voyage sans dossier actif} ,
		en	=> qq{Travel without an trip number},
	},
	fundsel_label	=> {
		fr	=> qq{Sï¿½lectionner un fonds} ,
		en	=> qq{Select a fund},
	},
	choose_label	=> {
		fr	=> qq{choisir} ,
		en	=> qq{select},
	},
	tripnb_label	=> {
		fr	=> qq{Si applicable prï¿½ciser le numï¿½ro de DF} ,
		en	=> qq{If applicable indicate DF reference},
	},
	cff_label	=> {
		fr	=> qq{vers la commande de billets CFF en ligne} ,
		en	=> qq{to Online CFF ticket shop},
	},
	continue_label	=> {
		fr	=> qq{Continuer} ,
		en	=> qq{Continue},
	},
	cancel_label	=> {
		fr	=> qq{Annuler cette requï¿½te} ,
		en	=> qq{Cancel this operation},
	},
	ticketshop_label	=> {
		fr	=> qq{Ticketshop : billets internationnaux} ,
		en	=> qq{Ticketshop: international tickets},
	},
	swisspass_label	=> {
		fr	=> qq{Swisspass : billets en Suisse} ,
		en	=> qq{Swisspass: Swiss tickets},
	},
	travel_for_label	=> {
		fr	=> qq{Voyage pour} ,
		en	=> qq{Travel for},
	},
	note_label	=> {
		fr	=> qq{Les achats d'abonnements CFF et abonnements régionaux doivent obligatoirement être effectués via les Ressources Humaines de l'EPFL.<br>Les achats privés sont interdits.<br> <a href="https://www.epfl.ch/campus/services/wp-content/uploads/2019/06/CFF_2019AvantageMobiliteFRAANG.pdf" target="_blank">Pour plus d'informations...</a> } ,
		en	=> qq{Purchase of SBB subscriptions and regional subscriptions must be made via EPFL Human Resources Service.<br>
		Private purchases are prohibited.<br>
		<a href="https://www.epfl.ch/campus/services/wp-content/uploads/2019/06/CFF_2019AvantageMobiliteFRAANG.pdf" target="_blank">More details...</a> },
	},
};

# 	$login_as 	= '169419';

	my $DEBUG 		= -f '/opt/dinfo/etc/MASTER' ? 0 : 1;
	if ($DEBUG) {
		$cffLogon = 'https://int-www.sbb.ch/ticketshop/b2b/SSOLogon.do';
		$custURL	= 'Customer=epfl_new';	
		$CFFwebShop		= 'https://int-www.sbb.ch/';
		$urlDossiers  = qq'https://testsapservices.epfl.ch/poq/RESTAdapter/api/fi/travelrequests';
	} else {
		$cffLogon	= 'https://www.sbb.ch/mct/wi/shop/b2b/SSOLogon.do';
		$custURL	= 'Customer=epfl';
		$custURL	= 'Customer=epfl_new';
		$CFFwebShop		= 'https://www.sbb.ch/';
		$urlDossiers = qq'https://sapservices.epfl.ch/pop/RESTAdapter/api/fi/travelrequests';
	}

	%args	= loadargs ();
	$lang = $args{lang} ? $args{lang} : 'en';
	$dbh	= new Cadi::CadiDB (
		  dbname => 'cff'
	);
	erreur ("FATAL DB ACCESS") unless $dbh;
	$Accreds	= new Cadi::Accreds (caller => '104782', utf8 => 1);
	$db_dinfo	= new Cadi::CadiDB (
		  dbname => 'dinfo',
		   trace => 1,
				utf8 => 1,
	  ) unless $db_dinfo;
	erreur ("FATAL DB ACCESS") unless $db_dinfo;

	$ldap    	= Net::LDAP->new('ldap.epfl.ch')    or erreur ("new LDAP : $!");

	authenticate() if $pi ;

	purge_transactions ('5');

	if      ($pi =~  /^\/go/) {
		go ();
	} elsif ($pi =~  /^\/main/) {
		main ();
	}

	my $template = initTempl('default.tmpl');
	$template->param(sErrMsg => $errmsg);
	print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
	exit;

#_________________
sub main {

	my $template = initTempl('main.tmpl');
#warn "--> main :: op=$args{op}, person=$args{person}\n";

	my $all_fonds;
	#	- SKIP FT03 MOTIF FONDS
	my $sql = qq{select * from dinfo.fonds where etat='O' and motif <> 'FT03'};
	my $sth = $db_dinfo->query ($sql);
	while (my $data = $sth->fetchrow_hashref) {
		$all_fonds->{$data->{no_fond}} = $data;
	}

	my @fondsloop;
	map { 
		if ( $all_fonds->{$_} ) {
			push @fondsloop, {
				fond => $_,
			};
		}
	} sort keys %$fonds;

	$template->param(sFondsLoop  => \@fondsloop );
	$template->param(sFormaction => "$me/go?lang=$lang"		);

	if ( $USE_DOSSIERS ) {
			my $user;
			if ( $args{op} eq 'search' ) {
				my $person = $args{person};
					 $person =~ s/^\s+//;
					 $person =~ s/\s+$//;
				erreur ("Veuillez saisir le nom ou le no sciper de la personne") unless $person;

				#	- find person
				if ( $person =~ /\d\d\d\d\d\d/ ) {
					$user 		 = getUserBySciper( $person );
				} else {
					my $users = getUsersByName( $person );
					if ( scalar keys %$users > 1 ) {
						my @persons_loop;
						foreach my $sciper ( sort { $users->{$a}->{name} cmp $users->{$b}->{name} } keys %$users ) {
							push @persons_loop, {
								sciper=> $sciper,
								name	=> $users->{$sciper}->{name},
								url		=> $me,
								lang	=> $lang,
							};
						}
						$template->param(sErrMsg 	  	=> $errmsg);
						$template->param(sPersonsLoop => \@persons_loop);
						print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
						exit;
					}
					$user 		 = getUserBySciper( each %$users );
				}
			} 
	#warn "--> main :: user=$user\n";

		if ( $args{op} eq 'found' || $user ) {
			$user 		  = getUserBySciper( $args{sciper} ) unless $user;
			$template->param(sFound		 	 => 1 ) if $args{op} eq 'found';
			$template->param(sPersName	 => $user->{name} );
			$template->param(sPersSciper => $user->{sciper} );
			erreur ("No sciper absent") unless $user->{sciper};

			#	- get dossiers voyages
			my $dossiers = getDossiers ( $user->{sciper} );
			if ( $dossiers ) {
				#	- check fonds
				my @managed_trips;
				foreach my $dossier ( @$dossiers ) {
					foreach my $fonds_item ( split /,/, $dossier->{concatFunds} ) { 
						next unless $fonds_item;
						if ( defined $fonds->{$fonds_item} ) {
							push @managed_trips, $dossier;
							last;
						}
					}
	#warn "--> ERR fonds KO: $dossier->{dates} : $dossier->{concatFunds}\n" unless $dossier_ok;
				}
		
				if ( scalar @managed_trips ) {
					@managed_trips = sort { $a->{destination} cmp $b->{destination} } @managed_trips;
					$template->param( sHasTravelNb => 1 );
					$template->param( sTravels 	   => \@managed_trips );
					print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
					exit;
				}
			}
		}

	}

	$template->param(sErrMsg => $errmsg);
	print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
	exit;

}

#_________________
sub go {

  my $id   = genkey ();
  my $loop = 1;
  while ($loop) {
	  my $sth = $dbh->query ('select id from transactions where id=?', $id);
    if ($sth->fetchrow) {
       $id = genkey ();
    } else {
       $loop = 0;
    }
  }

	my ($no, $sNoVoyage, $Fonds);
	if ( $USE_DOSSIERS ) {
		($sNoVoyage, $Fonds) = split /:/, $args{sNoVoyage};
		$Fonds = $args{fond} unless ($Fonds);
		$no = removeaccents($sNoVoyage);
	} else {
		$Fonds = $args{fond};
		$no = $args{sNoVoyage};
	}
#  erreur ('Numï¿½ro du voyage absent') unless $no;
	
	unless ($Fonds) {
		my $template = initTempl('priv.tmpl');
		$errmsg = qq{Veuillez saisir le numï¿½ro du fonds};
		$template->param(sErrMsg => $errmsg);
		print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
		exit;
	}

	#	- purge user transactions
	$dbh->query ('delete from transactions where sciper=?', $login_person->{sciper});

	my ($nom, $prenom, $email, $sexe, $phones, $scipertodo);

	$scipertodo = $login_person->{sciper};
	$nom 				= $login_person->{nom};
	$prenom 		= $login_person->{prenom};
	$email 			= $login_person->{email};
	$phones 		= $login_person->{phones};
	$sexe 			= $login_person->{sexe};
	$sexe 			= $sexe eq 'F' ? '1' : '2';

  my $sql = qq{insert into transactions set
  id=?,
	sciper=?,
	nom=?,
	pnom=?,
	email=?,
	phone=?,
	no_fond=?,
	sexe=?,
	no=?,
	datecrt=now()
  };
  my @params = ($id, $scipertodo, $nom, $prenom, $email, $phones, $Fonds, $sexe, $no);
  
  if ($args{scipertodo}) {
	  my $person 	= getPersonData ($args{scipertodo});
	  if ($person) {
			$sql .= qq{, benef_sciper=?	};
			push @params, $args{scipertodo};
		}
  }

  my $sth = $dbh->query ($sql, @params);

  write_log ($scipertodo, "$id:$nom:$prenom:$sexe:$email:$phones:$Fonds:$no");

	my $redirect;
	if ($args{goto} eq 'swisspass') {
warn "--> go to Swisspass : $id:$nom:$prenom:$sexe:$email:$phones:$Fonds:$no";
		$redirect = $CFFwebShop;
	} else {
warn "--> go to SSO : $id:$nom:$prenom:$sexe:$email:$phones:$Fonds:$no";
		$redirect = qq{$cffLogon?$custURL&SAMLart=$id};
	}
	print qq{Location: $redirect\n\n};
	exit;
}

#_________________
sub getFonds {
	my ($items)	= @_;

	my $fonds;
	map { 
		if ( $items->{$_} =~ /^y/ ) {
			if ( $_ =~ /^FF(.*)$/ ) {
				my $fond = $1;
				$fond =~ s/FF//;
				$fonds->{$fond} = 1;
			}
		}
	} keys %$items;
  
  return $fonds;

}

#_________________
sub purge_transactions {
   my ($sesslife) = @_;
   
  return if $NO_PURGE; 
	$dbh->query (qq{delete from transactions where addtime(datecrt,'0:$sesslife:5') < now()});
}
#_________________
sub quit {
  if ($tequila) {
    $tequila->killsession ();
    $tequila->{authenticated} = undef;
  }
  main ();
}
#_________________
sub write_log {
  my ($sciper, $msg) = @_;
  my $sql = qq{insert into logs set ts=now(),	sciper=?, msg=?};
	$dbh->query ($sql, $sciper, $msg);

}
#_________________
sub erreur {
  my ($err_msg) = @_;

warn " ** ERROR : $err_msg\n";
  my $template = initTempl('err.tmpl');
  $template->param(sErrMsg => $err_msg);
  print "Content-Type: text/html; charset=utf-8\n\n", $template->output;
  exit;
}
#_________________
sub authenticate {

	#my  $tequilaurl =  'https://test-tequila.epfl.ch/tequila';
	my  $tequilaurl =  'https://tequila.epfl.ch/tequila';

  unless ($tequila) {
    $tequila = new Tequila::Client (
	  service    => 'Commande de billets CFF en ligne',
	  request    => [ 'name','firstname','uniqueid','email' ],
	  identities => 'any',
	  serverurl	 => $tequilaurl,
	  urlaccess  => "https://$ENV{SERVER_NAME}$ENV{REQUEST_URI}?$ENV{QUERY_STRING}",
    );
    $tequila->init ();
  } 

  $tequila->setclientsesskey ($key) if $key;
  $tequila->setlang  		($lang);
  $tequila->require     ('droit-'.$RIGHT_NAME);

  $tequila->authenticate ();

  $key 			 = $tequila->{key};
  my $sciper = $tequila->{attrs}->{uniqueid};

  if ($login_as and $sciper eq '104782') {
  	$sciper = $login_as;
  }

	my $rights = $Accreds->getAllUnitsWhereHasRight ($sciper, $RIGHT_NAME);	#	- 'railticket'
	$fonds		  = getFonds ($rights);
  
  $login_person = getPersonData ($sciper);

  erreur ("pas de droit pour ce service, veuillez contacter un de vos accrï¿½diteurs") unless scalar (keys %$fonds)  > 0;

warn "cff $login_person->{nom} $login_person->{prenom}";

}

#___________________
sub getPersonsData {
  my ($scipers) = @_;
  return unless $scipers;
  $scipers =~ s/,/','/g;

  my $users_data;
  my $sql = qq{select sciper.sciper, nom_acc, prenom_acc, nom_usuel, prenom_usuel, addrlog from dinfo.sciper 
  	left outer join dinfo.emails on sciper.sciper=emails.sciper where sciper.sciper in ('$scipers') };
  my $sth = $db_dinfo->query ($sql);
  while (my $data = $sth->fetchrow_hashref) {
  	next unless $data->{sciper};
  	my $nom 	 = $data->{nom_usuel} 	? $data->{nom_usuel} 	: $data->{nom_acc};
  	my $prenom = $data->{prenom_usuel} ? $data->{prenom_usuel} : $data->{prenom_acc};

  	$users_data->{$data->{sciper}} = {
  		nom 	 => $nom,
  		prenom => $prenom,
  		email  => $data->{addrlog},
  	}; 
  }
  
  $users_data;
}

#___________________
sub getPersonData {
  my ($sciper) = @_;
  return unless $sciper;

  my $sql = qq{select nom_acc,prenom_acc,nom_usuel,prenom_usuel,addrlog, sexe 
  	from dinfo.sciper 
  	left join dinfo.emails on sciper.sciper=emails.sciper
  	where sciper.sciper=?};
  my $sth = $db_dinfo->query ($sql, $sciper);
  my $person;
  while (my $data = $sth->fetchrow_hashref) {
  	next unless $data;
  	$person->{nom} 		= $data->{nom_usuel} 	? $data->{nom_usuel} 	: $data->{nom_acc};
  	$person->{prenom}	= $data->{prenom_usuel} ? $data->{prenom_usuel} : $data->{prenom_acc};
  	$person->{email} 	= $data->{addrlog};
  	$person->{sexe} 	= $data->{sexe};
  }

  my $phones;
  my $sql 	 = qq{select distinct dinfo.annu.telephone1,dinfo.annu.telephone2	
  	from dinfo.sciper
  	left join dinfo.annu on dinfo.sciper.sciper=dinfo.annu.sciper
  	where dinfo.annu.sciper=?};
  my $sth 	  = $db_dinfo->query ($sql, $sciper);
		
  while (my ($tel1,$tel2) = $sth->fetchrow) {
    $phones .= ",$tel1" if $tel1;
    $phones .= ",$tel2" if $tel2;
  }
  $phones =~ s/^,//;
  my $phone;
  map {
  	$_ =~ s/0041//;
  	$_ =~ s/^0//;
  	if ($_ and $phone !~ /$_ /) {
		if (length($_) == 5) {
				$phone .= qq{+412169$_ };
		} else {
			$phone .= qq{+41$_ };
		}
	}  	
  } split /,/, $phones;
  $phones = substr($phone, 0, 12);
  $phones = '+41216931111' unless $phones;
  $person->{phones} = $phones;

 	$person->{sciper}	= $sciper;

  return $person;

}

#_____________
sub removeaccents {
  my ($str) = @_;
  $str =~ tr/\200-\237//d;
  $str =~ tr/\240-\377/"                               AAAAAA CEEEEIIIIDNOOOOO OUUUUY  aaaaaa ceeeeiiiionooooo ouuuuy y"/;
#                       "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"
  return $str;
}
#_________________
sub dbconnect {
	my ($dbkey) = @_;
	
	my $dbconf_file = '/opt/dinfo/etc/dbs.conf';
	die "dbconnect : ERR OPEN $dbconf_file [$!]" unless (open (DBCONF, "$dbconf_file")) ;
	my ($dbname, $dbhost, $dbuser, $dbpwd) ;
	while (<DBCONF>) {
		chomp;
		next if $_ =~ /^#/;	# - comments
		$_ =~ s/\t+/\t/g;
		next unless $_;
		my @items = split /\t/, $_;

		next unless $items[0] eq $dbkey;
		$dbname = $items[1];
		$dbhost = $items[2];
		$dbuser = $items[3];
		$dbpwd = $items[4];

		last;
	}
	close DBCONF;

	die "dbconnect : ERR DB CONFIG : $dbname, $dbhost, $dbuser" unless ($dbname and $dbhost and $dbuser and $dbpwd) ;
	my $dsndb    = qq{dbi:mysql:$dbname:$dbhost:3306}; 
	my $dbh = DBI->connect ($dsndb, $dbuser, $dbpwd);
	$dbh->{'mysql_enable_utf8'} = 1;

	die "dbconnect : ERR DBI CONNECT : $dbhost, $dbname, $dbuser" unless $dbh;
	
	return $dbh;
}
#_________________
sub dbquery {
  my ($sql, @params) = @_;

  my $sth = $dbh->prepare( $sql) or die "database fatal erreur prepare\n$DBI::errstr\n$sql\n";
  $sth->execute (@params)		 		 or die "database fatal erreur : execute : $DBI::errstr\n$sql\n";
  return $sth;
  
}
#_________________
sub loadargs {

  my $query = $ENV{QUERY_STRING};
  my $postdata;
  
  if ($ENV{'REQUEST_METHOD'} && $ENV{'REQUEST_METHOD'} eq 'POST') {
   read (STDIN, $postdata, $ENV{'CONTENT_LENGTH'});
  }
  my $allargs = $query . '&' . $postdata;
  my @fields  = split (/&/, $allargs);
  foreach (@fields) {
    s/\+/ /g;  
    s/%([0-9a-f]{2,2})/pack ("C", hex ($1))/gie;
  }
  my %args;
  foreach my $field (@fields) {
    next unless ($field =~ /=/);  
    my ($name, $value) = split(/=/, $field, 2);  
    if ($name eq 'lang') {
    	next unless $value =~ /^(fr|en|)$/;
    }
    if ($name eq 'sciper') {
    	next unless $value =~ /^\d\d\d\d\d\d$/;
    }
    if ($name eq 'cf') {
    	next unless $value =~ /^\d\d\d\d$/;
    }
    $args {$name} .= ' ' if $args {$name};  
    $args {$name} .= "$value";
  }
  %args
}
#_________________
sub genkey {
 srand (time ^ ($$ + ($$ << 15)));
 my $key = "";
 for (my $i = 0; $i < 32; $i++) {
   my $car .= int rand (35);
   $key .= ('a'..'z', '0'..'9')[$car];
 }
 return $key;
}
#------
sub initTempl {
   my ($tmplpath) = @_;

warn "cff initTempl: $tmpldir$tmplpath";
   my $template = HTML::Template->new(filename => $tmpldir.$tmplpath,
	   strict => 0,
	   cache 	=> 1,
	   utf8 	=> 1,
	   die_on_bad_params => 0) or die "err : $!";

   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   $year += 1900;
   $template->param(sCrtYear 			=> $year);
   $template->param(sPathMe  			=> $me);
   $template->param(sPathInfo			=> $pi);
   $template->param(sID 	 	 			=> $login_person->{sciper});
   $template->param(sLoginPrenom  => $login_person->{prenom});
   $template->param(sLoginNom 	 	=> $login_person->{nom});
   $template->param(sLang		 			=> $lang);
   $template->param(sLangFR	 			=> $lang eq 'fr');
   $template->param(sUseDossiers 	=> $USE_DOSSIERS);

   $template->param(sHelpEPFL			=> $help->{help_epfl}->{$lang});
   $template->param(sHelpCFFch		=> $help->{help_cff_ch}->{$lang});
   $template->param(sHelpCFFmobile=> $help->{help_cff_mobile}->{$lang});
   $template->param(sHelpCFFint		=> $help->{help_cff_int}->{$lang});

	 foreach my $item (keys %$messages) {
   	$template->param($item				=> $messages->{$item}->{$lang});
	 }

   return $template;
}
#_________________
sub getUsersByName {
	my ($name) = @_;
	return unless $name;

	$name =~ s/^ //g;
	$name =~ s/ $//g;
	$name =~ s/'/''/g;
	$name = convertaccented($name);

	my $users;
	my $sql = qq{select sciper.sciper, nom_acc,prenom_acc,nom_usuel,prenom_usuel,addrlog 
		from dinfo.sciper 
		left join dinfo.emails on sciper.sciper=emails.sciper
		where nom_acc like '$name%'};
	my $sth = $db_dinfo->query ($sql);
	while (my $data = $sth->fetchrow_hashref) {
		next unless $data->{sciper};
		my $nom			= $data->{nom_usuel} 		? $data->{nom_usuel} 		: $data->{nom_acc};
		my $prenom	= $data->{prenom_usuel} ? $data->{prenom_usuel} : $data->{prenom_acc};
#warn ">> getUsersByName : $data->{sciper}, $nom $prenom, $data->{addrlog}\n";
		$users->{$data->{sciper}} = {
			sciper => $data->{sciper},
			name 	 => "$nom $prenom",
			email	 => $data->{addrlog},
		};
	}

	return $users;
}
#_________________
sub getUserBySciper {
	my ($sciper) = @_;

	return unless $sciper;
	erreur ("numï¿½ro sciper incorrect") unless $sciper =~ /\d\d\d\d\d\d/;
	my $user;
	#	- search sciper
	my $sql = qq{select nom_acc,prenom_acc,nom_usuel,prenom_usuel,addrlog, date_naiss
		from dinfo.sciper 
		left join dinfo.emails on sciper.sciper=emails.sciper
		where sciper.sciper=?};
	my $sth = $db_dinfo->query ($sql, $sciper);
	if (my $data = $sth->fetchrow_hashref) {
		$user->{sciper}	= $sciper;
		my $nom			= $data->{nom_usuel} 		? $data->{nom_usuel} 		: $data->{nom_acc};
		my $prenom	= $data->{prenom_usuel} ? $data->{prenom_usuel} : $data->{prenom_acc};
		$user->{name}	 	=  "$nom $prenom";
		$user->{email} 	= $data->{addrlog};
		my ($yr, $mon, $day) = split '.', $data->{date_naiss};
		$user->{date_naiss} = qq{$yr-$mon-$day};
	}

	return $user;
}
#_________________
sub getDossiers {
	my ( $sciper ) = @_;
	return '' unless $sciper;

	$urlDossiers .= qq{?sciper=$sciper};
	my $lwp  = new LWP::UserAgent;
	my $req  = new HTTP::Request ('GET', $urlDossiers);
	   $req->authorization_basic( $sap_user, $sap_pwd );
	my $res  = $lwp->request ($req);
	if ( $res->code == 200 ) {
warn " --> getDossiers : status 200\n";
		return '' if $res->content eq '""';
warn " --> getDossiers : status 200, content OK\n";
		my $ret  = decode_json( $res->content );

		return $ret->{travelRequests};
	} else {
		warn "getDossiers : ** ERR sciper=$sciper, code=".$res->code;
		return '';
	}
warn " --> getDossiers : $sciper NOT FOUND\n";

	return '';

}
#_________________
sub utf8tolatin1 {
    my $string = shift;
    $string =~ s/([\xC0-\xDF])([\x80-\xBF])/chr(ord($1)<<6&0xC0|ord($2)&0x3F)/eg;
    return $string;
}


sub convertaccented {
 my ($str) = @_;

 my $tmpstr = lc($str);
#warn "convertaccented :: $tmpstr\n";
 for ( $tmpstr ) {  # the variable we work on
   s/\xe0/a/ig;
   s/\xe1/a/ig;
   s/\xe2/a/ig;
   s/\xe3/a/ig;
   s/\xe5/a/ig;
   s/\xe4/ae/ig;
   s/\xe6/ae/ig;
   s/\xe7/c/ig;

   s/\xe8/e/ig;
   s/\xe9/e/ig;
   s/\xea/e/ig;
   s/\xeb/e/ig;

   s/\xec/i/ig;
   s/\xed/i/ig;
   s/\xee/i/ig;
   s/\xef/i/ig;

   s/\xf1/n/ig;
   s/\xf2/o/ig;
   s/\xf3/o/ig;
   s/\xf4/o/ig;
   s/\xf5/o/ig;

   s/\xf6/oe/ig;
   s/\xf9a/u/ig;
   s/\xf9b/u/ig;
   s/\xfc/ue/ig;
   s/\xfd/y/ig;
   s/\xff/y/ig;

   s/[^\0-\x80]//ig;  ##  clear everything else; optional
 } 
 
 uc($tmpstr);

}
